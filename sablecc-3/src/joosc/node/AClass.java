/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

@SuppressWarnings("nls")
public final class AClass extends PClass
{
    private PClassmods _classmods_;
    private TIdentifier _identifier_;
    private PExtension _extension_;
    private final LinkedList<PField> _fields_ = new LinkedList<PField>();
    private final LinkedList<PConstructor> _constructors_ = new LinkedList<PConstructor>();
    private final LinkedList<PMethod> _methods_ = new LinkedList<PMethod>();

    public AClass()
    {
        // Constructor
    }

    public AClass(
        @SuppressWarnings("hiding") PClassmods _classmods_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PExtension _extension_,
        @SuppressWarnings("hiding") List<?> _fields_,
        @SuppressWarnings("hiding") List<?> _constructors_,
        @SuppressWarnings("hiding") List<?> _methods_)
    {
        // Constructor
        setClassmods(_classmods_);

        setIdentifier(_identifier_);

        setExtension(_extension_);

        setFields(_fields_);

        setConstructors(_constructors_);

        setMethods(_methods_);

    }

    @Override
    public Object clone()
    {
        return new AClass(
            cloneNode(this._classmods_),
            cloneNode(this._identifier_),
            cloneNode(this._extension_),
            cloneList(this._fields_),
            cloneList(this._constructors_),
            cloneList(this._methods_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClass(this);
    }

    public PClassmods getClassmods()
    {
        return this._classmods_;
    }

    public void setClassmods(PClassmods node)
    {
        if(this._classmods_ != null)
        {
            this._classmods_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classmods_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PExtension getExtension()
    {
        return this._extension_;
    }

    public void setExtension(PExtension node)
    {
        if(this._extension_ != null)
        {
            this._extension_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extension_ = node;
    }

    public LinkedList<PField> getFields()
    {
        return this._fields_;
    }

    public void setFields(List<?> list)
    {
        for(PField e : this._fields_)
        {
            e.parent(null);
        }
        this._fields_.clear();

        for(Object obj_e : list)
        {
            PField e = (PField) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._fields_.add(e);
        }
    }

    public LinkedList<PConstructor> getConstructors()
    {
        return this._constructors_;
    }

    public void setConstructors(List<?> list)
    {
        for(PConstructor e : this._constructors_)
        {
            e.parent(null);
        }
        this._constructors_.clear();

        for(Object obj_e : list)
        {
            PConstructor e = (PConstructor) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._constructors_.add(e);
        }
    }

    public LinkedList<PMethod> getMethods()
    {
        return this._methods_;
    }

    public void setMethods(List<?> list)
    {
        for(PMethod e : this._methods_)
        {
            e.parent(null);
        }
        this._methods_.clear();

        for(Object obj_e : list)
        {
            PMethod e = (PMethod) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methods_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classmods_)
            + toString(this._identifier_)
            + toString(this._extension_)
            + toString(this._fields_)
            + toString(this._constructors_)
            + toString(this._methods_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classmods_ == child)
        {
            this._classmods_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._extension_ == child)
        {
            this._extension_ = null;
            return;
        }

        if(this._fields_.remove(child))
        {
            return;
        }

        if(this._constructors_.remove(child))
        {
            return;
        }

        if(this._methods_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classmods_ == oldChild)
        {
            setClassmods((PClassmods) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._extension_ == oldChild)
        {
            setExtension((PExtension) newChild);
            return;
        }

        for(ListIterator<PField> i = this._fields_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PField) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PConstructor> i = this._constructors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PConstructor) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethod> i = this._methods_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethod) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
