/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

@SuppressWarnings("nls")
public final class AMainMethod extends PMethod
{
    private PMainargv _mainargv_;
    private final LinkedList<PStm> _stmts_ = new LinkedList<PStm>();

    public AMainMethod()
    {
        // Constructor
    }

    public AMainMethod(
        @SuppressWarnings("hiding") PMainargv _mainargv_,
        @SuppressWarnings("hiding") List<?> _stmts_)
    {
        // Constructor
        setMainargv(_mainargv_);

        setStmts(_stmts_);

    }

    @Override
    public Object clone()
    {
        return new AMainMethod(
            cloneNode(this._mainargv_),
            cloneList(this._stmts_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainMethod(this);
    }

    public PMainargv getMainargv()
    {
        return this._mainargv_;
    }

    public void setMainargv(PMainargv node)
    {
        if(this._mainargv_ != null)
        {
            this._mainargv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainargv_ = node;
    }

    public LinkedList<PStm> getStmts()
    {
        return this._stmts_;
    }

    public void setStmts(List<?> list)
    {
        for(PStm e : this._stmts_)
        {
            e.parent(null);
        }
        this._stmts_.clear();

        for(Object obj_e : list)
        {
            PStm e = (PStm) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmts_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mainargv_)
            + toString(this._stmts_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mainargv_ == child)
        {
            this._mainargv_ = null;
            return;
        }

        if(this._stmts_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mainargv_ == oldChild)
        {
            setMainargv((PMainargv) newChild);
            return;
        }

        for(ListIterator<PStm> i = this._stmts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
